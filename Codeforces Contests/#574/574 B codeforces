#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long int 
#define vi vector<int>
#define vl vector<ll>
#define vvll vector<pair<ll,ll>>
#define vvil vector<pair<int,ll>>
#define vvii vector<pair<int,int>>
#define mll map<ll,ll>
#define umll unordered_map<ll,ll>
#define umsl unordered_map<string,ll>
#define mlll map<ll,pair<ll,ll>>
#define mllll map<pair<ll,ll>,pair<ll,ll>>
#define que queue<ll>
#define deq deque<ll>
#define stk stack<ll>
#define fr(i,a,b) for(ll i=a;i<b;i++)
#define frr(i,a,b) for(ll i=a;i>=b;i--)
#define fra(i,a,b,c) for(ll i=a;i<b;i+=c)
#define frs(i,a,b,c) for(ll i=a;i>=b;i-=c)
#define frm(i,a,b,c) for(ll i=a;i<b;i*=c)
#define frd(i,a,b,c) for(ll i=a;i<b;i/=c)
#define aut(i,a) for(auto i:a)
#define pb push_back
#define pf push_front
#define pp pop_back
#define ppf pop_front
#define mp make_pair
#define fi first
#define se second
#define lb(a,b) lower_bound(a.begin(),a.end(),b)
#define ub(a,b) upper_bound(a.begin(),a.end(),b)
#define st(a) sort(a.begin(),a.end());
#define s(a) a.size()
#define o_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define ook(k) order_of_key(k)
#define foo(k) find_by_order(k)
#define pq priority_queue<ll>
#define pqm priority_queue <ll, vector<ll>, greater<ll>> 
#define fast  ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define test  ll t;cin>>t;while(t--)
#define en "\n"

 
using namespace __gnu_pbds;
using namespace std;


//  ll root(ll A) {
//   ll p=100005;
//     ll l=0,h=min(p,A);
//     while(abs(l-h)>1)
//     {
//         ll mid= (l+h)/2;
//         if((mid*mid)>A)
//         h=mid-1;
//         else
//         l=mid;
//     }
//     if(h*h<=A)
//     return h;
//     return l;
// } 
// vector<ll> prime;
// void pr()
// {
//     bool b[100005];
//     for(ll i=0;i<100005;i++)
//     b[i]=false;
//     b[0]=true; b[1]=true;
//     for(ll i=2;i<root(100005);i++)
//     {
//         if(b[i]==false)
//         {
//             for(ll j=i*i;j<100005;j+=i )
//             b[j]=true;
//         }
//     }
//      for(ll i=0;i<100005;i++)
//     {if(b[i]==false)
//     prime.push_back(i);}
    
// }
// ll gcd(ll a, ll b)
// {
//     if(a==0)
//     return b;
//     else if(b==0)
//     return a;
//     else if(a>b)
//     return gcd(b,a%b);
//     else
//     return gcd(b%a,a);
// } 
//  long long int stringtoint(string s)
// {
//     long long int p=0;
//     for(int i=0;i<s.length();i++)
//     {
//         p*=10;
//         p+=(s[i]-'0');
//     } return p;
// }
// vector <int> bfs(vector<int> g[], int N) {
// vector<int>a;
// queue<int>b;
// bool c[N]={false};
// b.push(0);
// c[0]=true;
// while(!b.empty())
// { int p=b.front();

// a.push_back(p);
// for(int i=0;i<g[p].size();i++)
// { if(c[g[p][i]]==false)
//   { b.push(g[p][i]);
//       c[g[p][i]]=true;}
//   }
    
//     b.pop();
// }
// return a;
// }
// ll dij(ll x , ll y , vvll a[],ll n)
// {
//     ll dist[n],c,d;
//     fr(i,0,n)
//     dist[i]=LONG_MAX;
//     dist[x]=0;
//     bool b[n]={false};
//     multiset<pair<ll,ll>>s;
//     pair<ll,ll>p;
//     s.insert({x,0});
//     while(!s.empty())
//     { p=*s.begin();
//     s.erase(s.begin());
//     c=p.first; d=p.second;
//     if(b[c]==true)
//     continue;
//     b[c]=true;
//     fr(j,0,a[c].size())
//     {
//         if(dist[c]+a[c][j].second< dist[a[c][j].first])
//         {
//             dist[a[c][j].first]=dist[c]+a[c][j].second;
//             s.insert({a[c][j].first,dist[a[c][j].first]});
//         }
//     }
        
//     }
//     if(dist[y]==LONG_MAX)
//     return -1;
//     return dist[y];
// }

// bool cmp(pair<int,int>a,pair<int,int>b)
// {
//     if(a.first==b.first)
//      return (a.second<b.second);
//     return (a.first<b.first);
   
// }


// ll parent(ll p[], ll i)
// {
//     if(p[i]!=i)
//     return p[i]=parent(p,p[i]);
//     return i;
// }

void solve()
{
    ll n,m,a,b;
    cin>>n>>m;
    ll g1[n][n];
    fr(i,0,n)
    {
        fr(j,0,n)
        g1[i][j]=0;
    }
    vector<ll>g2[n];
    vvll ed;
    ll ans=LONG_MAX;
    fr(i,0,m)
    {
        cin>>a>>b;
        a--;b--;
        g1[a][b]=1;
        g1[b][a]=1;
        g2[a].pb(b);
        g2[b].pb(a);
        ed.pb(mp(a,b));
    }
    fr(i,0,m)
    { ll p,q,r;
    p=ed[i].first;
    q=ed[i].second;
        fr(j,0,g2[p].size())
        {
            r=g2[p][j];
            if(g1[q][r]==1 )
           { ll temp=g2[p].size() + g2[q].size()+ g2[r].size()-6;
               ans=min(ans,temp);}
        }
    }
    if(ans==LONG_MAX)
    cout<<-1<<en;
    else
    cout<<ans<<en;
    
}

int main()
{  /* #ifndef ONLINE_JUDGE
  
    // For getting input from input.txt file
    freopen("input.txt", "r", stdin);
  
    // Printing the Output to output.txt file
    freopen("output.txt", "w", stdout);
  
#endif */

    fast;
    solve();


}